name: Infrastructure

on:
  push:
    paths:
      - 'infrastructure/**'
    branches: [main, test]
  pull_request:
    paths:
      - 'infrastructure/**'
    branches: [main, test]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - production
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  PROJECT_ID: ojo-database
  REGION: us-central1

jobs:
  infrastructure:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}
          export_default_credentials: true
      
      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: "1.6.0"
      
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "action=${{ github.event.inputs.action }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "action=plan" >> $GITHUB_OUTPUT
          else
            echo "environment=test" >> $GITHUB_OUTPUT
            echo "action=plan" >> $GITHUB_OUTPUT
          fi
      
      - name: Initialize OpenTofu
        working-directory: infrastructure/environments/${{ steps.env.outputs.environment }}
        run: tofu init
      
      - name: Validate OpenTofu configuration
        working-directory: infrastructure/environments/${{ steps.env.outputs.environment }}
        run: tofu validate
      
      - name: Format check
        working-directory: infrastructure/
        run: tofu fmt -check -recursive
      
      - name: Plan infrastructure
        working-directory: infrastructure/environments/${{ steps.env.outputs.environment }}
        run: |
          tofu plan \
            -var="service_image_tag=latest" \
            -out=tfplan
      
      - name: Apply infrastructure
        if: steps.env.outputs.action == 'apply' && github.event_name == 'workflow_dispatch'
        working-directory: infrastructure/environments/${{ steps.env.outputs.environment }}
        run: tofu apply tfplan
      
      - name: Destroy infrastructure
        if: steps.env.outputs.action == 'destroy' && github.event_name == 'workflow_dispatch'
        working-directory: infrastructure/environments/${{ steps.env.outputs.environment }}
        run: |
          tofu plan -destroy -out=destroy-plan
          tofu apply destroy-plan
      
      - name: Comment PR with plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './infrastructure/environments/${{ steps.env.outputs.environment }}/tfplan';
            
            if (fs.existsSync(path)) {
              const { execSync } = require('child_process');
              const plan = execSync('tofu show -no-color tfplan', { 
                cwd: './infrastructure/environments/${{ steps.env.outputs.environment }}',
                encoding: 'utf8' 
              });
              
              const body = `## Infrastructure Plan for ${{ steps.env.outputs.environment }}
              
              \`\`\`
              ${plan}
              \`\`\``;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }